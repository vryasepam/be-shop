service: product-service
frameworkVersion: "3"

plugins:
  - serverless-webpack
  - serverless-auto-swagger
  - serverless-dynamodb
  - serverless-offline # must be loaded after dynamodb
  - serverless-offline-watcher

provider:
  name: aws
  stage: dev
  runtime: nodejs18.x
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"

custom:
  environment:
    SQS_QUEUE_NAME: catalogItemsQueue
    SNS_TOPIC_NAME: createProductTopic
    SNS_TOPIC_ARN: !Ref CreateProductTopic
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  autoswagger:
    apiType: http
    typefiles: []
    basePath: /dev

  serverless-dynamodb:
    start:
      port: 8000
      docker: false
      seed: true
      migrate: true
    seed:
      products:
        sources:
          - table: products
            sources: [./database/seed/products.json]
          - table: stocks
            sources: [./database/seed/stocks.json]
  
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3001

  serverless-offline-watcher:
    - path: /**/*

functions:
  createProduct:
    handler: handlers/createProduct.handler
    events:
      - http:
          method: post
          path: products
          cors: true
  getProductsList:
    handler: handlers/getProductsList.handler
    events:
      - http:
          method: get
          path: products
          cors: true
  getProductById:
    handler: handlers/getProductsById.handler
    events:
      - http:
          method: get
          path: products/{productId}
          cors: true
          request:
            parameters:
              paths:
                productId: true
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.handler
    events:
      - sqs:
          arn: !GetAtt
            - CatalogItemsQueue
            - Arn
          batchSize: 5

resources:
  Resources:
    products:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    stocks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stocks
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.environment.SQS_QUEUE_NAME}

    CreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.environment.SNS_TOPIC_NAME}

    FirstEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: fotis54928@ahieh.com
        Protocol: email
        TopicArn: !Ref CreateProductTopic
        FilterPolicy: '{"totalCount": [{ "numeric": [">", 10] }]}'

    SecondEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: doworod330@nweal.com
        Protocol: email
        TopicArn: !Ref CreateProductTopic

  Outputs:
    CatalogItemsQueueArn:
      Value: !GetAtt CatalogItemsQueue.Arn
      Export:
        Name: CatalogItemsQueueArn-${sls:stage}

    CatalogItemsQueueName:
      Value: ${self:custom.environment.SQS_QUEUE_NAME}
      Export:
        Name: CatalogItemsQueueName
  